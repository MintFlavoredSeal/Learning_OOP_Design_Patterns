Facade Provides a simplified interface to a library, a framework, or any other complex set of classes.

A facade is a class that provides a simple interface to a complex subsystem which contains lots of moving parts. 
A facade might provide limited functionality in comparison to working with the subsystem directly. 
However, it includes only those features that clients really care about.

Having a facade is handy when you need to integrate your app with a sophisticated library that has dozens of features, 
but you just need a tiny bit of its functionality.


Use the Facade pattern when you need to have a limited but straightforward interface to a complex subsystem:

    Often, subsystems get more complex over time.
    the amount of configuration and boilerplate code it demands from a client grows larger.
    The Facade attempts to fix this problem by providing a shortcut to the most-used features of the subsystem 
    which fit most client requirements.


Use the Facade when you want to structure a subsystem into layers:

    Create facades to define entry points to each level of a subsystem. 
    You can reduce coupling between multiple subsystems by requiring them to communicate only through facades.

    